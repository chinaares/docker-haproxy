# Background: http://www.slideshare.net/haproxytech/haproxy-best-practice
global
    daemon
    log /dev/log   local0
    log /dev/log   local1 notice
    pidfile /var/run/haproxy.pid
    nbproc  2 #no of processes
    maxconn 128000
    user haproxy
    group haproxy

    # set default parameters to the intermediate configuration (Mozilla generator)
    # See: https://mozilla.github.io/server-side-tls/ssl-config-generator/
    tune.ssl.default-dh-param 2048
    ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA

defaults
    log    global
    option log-health-checks
    mode   http
    option httplog
    option dontlognull
    option forwardfor
    option http-keep-alive
    option http-tunnel
    timeout connect 5000
    timeout client 50000
    timeout server 50000

frontend http-in
    bind *:8080
    bind-process 1

    {{range $service := ls "/services"}}
    
    {{$key := printf "/services/%s/domain" $service}}  {{if exists $key}}
    acl host_{{$service}} hdr(host) -i {{getv $key}}
    {{end}}
    {{$key := printf "/services/%s/url_reg" $service}}  {{if exists $key}}
    acl host_{{$service}} url_reg -i {{getv $key}}
    {{end}}  
    acl {{$service}}_health path_beg /ping
    {{end}}
    
    {{range $service := ls "/services"}}
    use_backend {{$service}} if host_{{$service}}
    use_backend {{$service}} if {{$service}}_health
    {{end}}

{{range $service := ls "/services"}}
backend {{$service}}
    balance leastconn
    {{range $upstream := ls (printf "/services/%s/upstreams" $service)}}
    server {{$upstream}} {{printf "/services/%s/upstreams/%s" $service $upstream | getv}} check
    {{end}}
{{end}}

listen MyStats
    mode http
    bind 0.0.0.0:9000
    bind-process 2
    stats enable
    stats uri /
    stats refresh 5s
    stats show-node
    stats show-legends
    
    # if authentication is wanted
    acl auth_ok http_auth(stats-auth)
    http-request auth unless auth_ok
 
userlist stats-auth
    user statsuser insecure-password statsuserpass
